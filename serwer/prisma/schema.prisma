generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  name             String        @db.VarChar(255)
  lastName         String?
  image            String?
  verified         Boolean?      @default(false)
  verificationCode String?       @unique @db.Text
  password         String
  title            String?
  phone            String?
  location         String?
  role             Role          @default(USER)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  boards           Board[]       @relation("BoardUsers")
  BoardOnUser      BoardOnUser[]

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map(name: "users")
}

model Board {
  id          String        @id @default(uuid())
  name        String
  isActive    Boolean       @default(false)
  columns     Column[]
  tasks       Task[]
  statusId    Int
  users       User[]        @relation("BoardUsers")
  BoardOnUser BoardOnUser[]
}

model BoardOnUser {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  board      Board    @relation(fields: [boardId], references: [id])
  boardId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, boardId])
}

model Column {
  id       String @id @default(uuid())
  name     String
  boardId  String
  position Int
  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Task {
  id             String  @id @default(uuid())
  boardId        String
  title          String
  content        String?
  status         Int
  position       Int
  taskIdentifier String
  userId         Int
  board          Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
